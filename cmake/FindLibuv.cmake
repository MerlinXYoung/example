if( TARGET libuv)
    return()
endif()

set(PKG_CONFIG_USE_CMAKE_PREFIX_PATH ON)
find_package(PkgConfig)
pkg_check_modules(LIBUV QUIET libuv)
function (CompareVersion REQUEST_VERSION LOCAL_VERSION RESULT)
    # set(REQUEST_VERSION ${ARGV0})
    # set(LOCAL_VERSION ${ARGV1})
    string(REPLACE "." ";" REQUEST_VERSION_LIST ${REQUEST_VERSION})
    list(LENGTH REQUEST_VERSION_LIST REQUEST_VERSION_COUNT)
    while(${REQUEST_VERSION_COUNT} LESS 4)
        list(APPEND REQUEST_VERSION_LIST 0)
        list(LENGTH REQUEST_VERSION_LIST REQUEST_VERSION_COUNT)
    endwhile()
    #message(STATUS "REQUEST_VERSION_LIST:${REQUEST_VERSION_LIST}")
    string(REPLACE "." ";" LOCAL_VERSION_LIST ${LOCAL_VERSION})
    list(LENGTH LOCAL_VERSION_LIST LOCAL_VERSION_COUNT)
    while(${LOCAL_VERSION_COUNT} LESS 4)
        list(APPEND LOCAL_VERSION_LIST 0)
        list(LENGTH LOCAL_VERSION_LIST LOCAL_VERSION_COUNT)
    endwhile()
    #message(STATUS "LOCAL_VERSION_LIST:${LOCAL_VERSION_LIST}")
    list(GET REQUEST_VERSION_LIST 0 REQUEST_VERSION_MAJOR)
    list(GET LOCAL_VERSION_LIST 0 LOCAL_VERSION_MAJOR)
    #message(STATUS "MAJOR:${REQUEST_VERSION_MAJOR} ${LOCAL_VERSION_MAJOR}")
    if(REQUEST_VERSION_MAJOR LESS LOCAL_VERSION_MAJOR)
        set(${RESULT} ON PARENT_SCOPE)
        return()
    elseif(Libuv_FIND_VERSION_MAJOR GREATER LIBUV_VERSION_MAJOR)
        #set(${RESULT} OFF)
        return ()
    else()
    endif()
    #message(STATUS "RESULT:${RESULT}:${${RESULT}}")

    list(GET REQUEST_VERSION_LIST 1 REQUEST_VERSION_MINOR)
    list(GET LOCAL_VERSION_LIST 1 LOCAL_VERSION_MINOR)
    #message(STATUS "MINOR:${REQUEST_VERSION_MINOR} ${LOCAL_VERSION_MINOR}")
    if(REQUEST_VERSION_MINOR LESS LOCAL_VERSION_MINOR)
        set(${RESULT} ON PARENT_SCOPE)
        return()
    elseif(Libuv_FIND_VERSION_MINOR GREATER LIBUV_VERSION_MINOR)
        #set(${RESULT} OFF)
        return ()
    else()
    endif()

    #message(STATUS "RESULT:${RESULT}")

    list(GET REQUEST_VERSION_LIST 2 REQUEST_VERSION_PATCH)
    list(GET LOCAL_VERSION_LIST 2 LOCAL_VERSION_PATCH)
    #message(STATUS "PATCH:${REQUEST_VERSION_PATCH} ${LOCAL_VERSION_PATCH}")
    if(REQUEST_VERSION_PATCH LESS LOCAL_VERSION_PATCH)
        set(${RESULT} ON PARENT_SCOPE)
        return()
    elseif(Libuv_FIND_VERSION_PATCH GREATER LIBUV_VERSION_PATCH)
        #set(${RESULT} OFF)
        return ()
    else()
    endif()

    #message(STATUS "RESULT:${RESULT}")

    list(GET REQUEST_VERSION_LIST 3 REQUEST_VERSION_TWEAK)
    list(GET LOCAL_VERSION_LIST 3 LOCAL_VERSION_TWEAK)
    #message(STATUS "TWEAK:${REQUEST_VERSION_TWEAK} ${LOCAL_VERSION_TWEAK}")
    if(REQUEST_VERSION_TWEAK GREATER LOCAL_VERSION_TWEAK)
        #set(${RESULT} OFF)
        return()
    else()
        set(${RESULT} ON PARENT_SCOPE)
        return()
    endif()

endfunction()
# message(STATUS "LIBUV_FOUND:${LIBUV_FOUND}")
if(LIBUV_FOUND)
    # message(STATUS "LIBUV_LIBRARIES:${LIBUV_LIBRARIES}")
    # message(STATUS "LIBUV_LINK_LIBRARIES:${LIBUV_LINK_LIBRARIES}")
    # message(STATUS "LIBUV_LIBRARY_DIRS:${LIBUV_LIBRARY_DIRS}")
    # message(STATUS "LIBUV_LDFLAGS:${LIBUV_LDFLAGS}")
    # message(STATUS "LIBUV_LDFLAGS_OTHER:${LIBUV_LDFLAGS_OTHER}")
    # message(STATUS "LIBUV_INCLUDE_DIRS:${LIBUV_INCLUDE_DIRS}")
    # message(STATUS "LIBUV_CFLAGS:${LIBUV_CFLAGS}")
    # message(STATUS "LIBUV_CFLAGS_OTHER:${LIBUV_CFLAGS_OTHER}")

    # message(STATUS "LIBUV_VERSION:${LIBUV_VERSION}")
    # message(STATUS "LIBUV_PREFIX:${LIBUV_PREFIX}")
    # message(STATUS "LIBUV_INCLUDEDIR:${LIBUV_INCLUDEDIR}")
    # message(STATUS "LIBUV_LIBDIR:${LIBUV_LIBDIR}")
    # message(STATUS "find version:${Libuv_FIND_VERSION}")
    if(Libuv_FIND_VERSION)
        CompareVersion(${Libuv_FIND_VERSION} ${LIBUV_VERSION} VERSION_OK)
        #message(STATUS "VERSION_OK:${VERSION_OK}")
        if(NOT VERSION_OK)
            if(Libuv_FIND_REQUIRED)
                message(FATAL_ERROR "Libuv not found")
            else()
                message(WARNING "libuv not found")
            endif()
        endif()
        
    endif()

    find_library(Libuv_LIBRARY NAMES libuv.so libuv.dylib libuv.dll
        PATHS ${LIBUV_LIBDIR} ${LIBUV_LIBRARY_DIRS})
    find_library(Libuv_STATIC_LIBRARY NAMES libuv.a libuv_a.a libuv.dll.a
        PATHS ${LIBUV_LIBDIR} ${LIBUV_LIBRARY_DIRS})
    #message(STATUS "Libuv_LIBRARY:${Libuv_LIBRARY}")
    #message(STATUS "FOUND:${Libuv_LIBRARY_FOUND},${Libuv_STATIC_LIBRARY_FOUND}")
    if(Libuv_LIBRARY OR Libuv_STATIC_LIBRARY )
        set(Libuv_FOUND ON)
        set(Libuv_VERSION ${LIBUV_VERSION})
        set(Libuv_INCLUDE_DIR ${LIBUV_INCLUDE_DIRS})
        set(Libuv_LIBRARY_DIR ${LIBUV_INCLUDE_DIRS})
        message(STATUS "Found Libuv ${Libuv_LIBRARY} version:${Libuv_VERSION}")

        add_library(libuv SHARED IMPORTED )
        set_property(TARGET libuv PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LIBUV_INCLUDEDIR})
        set_property(TARGET libuv PROPERTY IMPORTED_LOCATION ${Libuv_LIBRARY})
        
        add_library(libuv-static STATIC IMPORTED )
        set_property(TARGET libuv-static PROPERTY INTERFACE_INCLUDE_DIRECTORIES ${LIBUV_INCLUDEDIR})
        set_property(TARGET libuv-static PROPERTY IMPORTED_LOCATION ${Libuv_STATIC_LIBRARY})
    endif()
else()
    if(Libuv_FIND_REQUIRED)
        message(FATAL_ERROR "Libuv not found")
    else()
        message(WARNING "libuv not found")
    endif()
endif()



